[["house-prices-LAUs.html", "Chapter 2 Housing prices at municipality level", " Chapter 2 Housing prices at municipality level We load all residences for year-round living (ENH_ANVEND_KODE) from the Building and Dwelling Register (BBR), and then we estimate the mean and median prices in each municipality. 110 = Farmhouse for agricultural property. 120, 121, 122 = Detached single-family house (detached house). 130, 131, 132 = Townhouse, chain, or semi-detached house (vertical separation between the units). 140 = Multi-storey residential building (multi-family house, including two-family house (horizontal separation between the units). 150 = College. 160 = Residential building for residential institution. 190 = Second building for year-round living. We selected from the main residential buildings those that are on the ordinary free trade (OVERDRAGELSES_KODE == 1 - Almindelig frit salg) or public sales (OVERDRAGELSES_KODE == 3 - Auktion). Furthermore, we filtered those dwellings that are actually used for residential purpose (i.e. BOLIGTYPE_KODE \\(\\neq\\) E - Andet (bl.a. institutioner og erhverv) or BOLIGTYPE_KODE \\(\\neq\\) 5 - Sommer-/fritidsbolig). Dwelling with a size lower that 10 \\(m^2\\) were removed from the analysis. Colleges were also excluded from the data analysis since they are a special type of buildings dedicated to students residences mainly outside of the free marked. # Residential buildings for year round living res_codes &lt;- tribble (~ENH_ANVEND_KODE, ~type, 110, &quot;Farmhouse&quot;, 120, &quot;Single-family house&quot;, 121, &quot;Single-family house&quot;, 122, &quot;Single-family house&quot;, 130, &quot;Semi-detached house&quot;, 131, &quot;Semi-detached house&quot;, 132, &quot;Semi-detached house&quot;, 140, &quot;Multi-storey&quot;) %&gt;% # Convert type to factor mutate(type = factor(type)) %&gt;% # Convert to data.table as.data.table() # Aux. function f_average_price_muni &lt;- function(.file) { fread(.file) %&gt;% # Select only Residential houses - Buildings for year-round living filter.(ENH_ANVEND_KODE %in% res_codes$ENH_ANVEND_KODE) %&gt;% # ordinary free trade or auction filter.(OVERDRAGELSES_KODE == &quot;1&quot; | OVERDRAGELSES_KODE == &quot;3&quot;) %&gt;% # Remove residential units not used for for residential purpose filter.(BOLIGTYPE_KODE != &quot;E&quot; | BOLIGTYPE_KODE != &quot;5&quot;) %&gt;% # Remove tiny dwellings (area &lt; 10 m2) filter.(BEBO_ARL &gt;= 10) %&gt;% # Add year of the BBR dataset mutate.(year = parse_number(stringr::str_extract(.file, &quot;_[0-9]+_&quot;))) %&gt;% # Convert house price (KONTANT_KOEBESUM) to numeric and kDKK mutate.(price_kDKK = KONTANT_KOEBESUM / 1000, price_kDKK = as.numeric(price_kDKK)) %&gt;% # Drop unused factors levels droplevels() } # Read in parallel csv_files_path &lt;- list.files(path = Sys.getenv(&quot;OneDrive_BBR_path&quot;), pattern = &quot;*.csv&quot;, full.names = TRUE) plan(multisession, workers = 7) res_prices &lt;- future_map_dfr(.x = csv_files_path, .f = f_average_price_muni) %&gt;% # rename KomKode mutate.(KomKode = paste0(&quot;0&quot;, KomKode)) %&gt;% rename.(muni_id = KomKode) plan(&quot;default&quot;) We adjusted the housing prices to 2019 prices. In this regard, we take into account the inflation and, therefore, prices from different years can be compared (Valtersdorf Møller (2020)). The adjusted price is obtained as follow: \\[ Pice_{2019} = Price_{i} \\cdot \\frac{Index_{2019}}{Index_{i}}\\] Where, \\(Price_{2019}\\) is the adjusted housing price for 2019, \\(Price_{i}\\) is the price of the respective year \\(i\\), and \\(Index_{i}\\) and \\(Index_{2019}\\) are the price indexes for the origin year \\({i}\\) and \\(2019\\), respectively. The indexes have been obtained from Statistic Denmark; i.e. table EJ6: Price index for sales property (2006=100) by category of real property and unit (Table 2.1). # DST table (PRIS112 - Consumer price index (2015=100) by main figures and time) id_table &lt;- &quot;EJ6&quot; dat_meta &lt;- get_table_metadata(table_id = id_table, variables_only = TRUE) # Values to retrieve variables &lt;- list( # Category of real property (i.e. One-family houses) list(code = &quot;EJENDOMSKATE&quot;, values = &quot;0111&quot;), # Index list(code = &quot;TAL&quot;, values = &quot;100&quot;), # From 2004 to 2019 list(code = &quot;Tid&quot;, values = seq(2004, 2019, 1)) ) # Get index price_index &lt;- get_data(&quot;EJ6&quot;, variables) %&gt;% select(-TAL) %&gt;% # Translate into English rename(index_desc = EJENDOMSKATE, index_year = TID, index_value = INDHOLD) %&gt;% # Convert index tu numeric mutate(index_value = index_value/10) # Print price index table price_index %&gt;% # Wide format pivot_wider(names_from = index_year, values_from = index_value) %&gt;% kbl(caption = &quot;Price index for sale properties in Denmark&quot;) %&gt;% kable_paper() %&gt;% scroll_box(width = &quot;100%&quot;) Table 2.1: Price index for sale properties in Denmark index_desc 2004 2005 2006 2007 2008 2009 2010 2011 2012 2013 2014 2015 2016 2017 2018 2019 One-family houses 70.1 82.3 100 105 101 88.1 90.5 88.1 85.1 87.4 90.4 95.8 99.6 104 108 111 # Adjust housing prices price_index_2019 &lt;- price_index %&gt;% filter(index_year == 2019) %&gt;% rename(index_2019 = index_value) # Add adjusted prices res_prices &lt;- res_prices %&gt;% # Add price index by year and category left_join.(price_index, by = c(&quot;year&quot; = &quot;index_year&quot;)) %&gt;% # Add columns with index_2019 mutate.(index_2019 = price_index_2019$index_2019) %&gt;% # Calculate prices 2019 mutate.(price_2019_kDKK = (price_kDKK * index_2019 / index_value)) %&gt;% # Price per m2 mutate(price_2019_kDKK_m2 = price_2019_kDKK / BEBO_ARL) Summary statistics of 2019 adjusted housing prices by municipalities res_prices_muni &lt;- res_prices %&gt;% # Estimate mean and median values (house prices) summarise.(n = n(), median_2019_kDKK_m2 = median(price_2019_kDKK_m2), .by = c(muni_id, year)) Price change with 2008 as baseline (year we start to have data of population change). res_prices_muni &lt;- res_prices_muni %&gt;% filter.(year &gt;= 2008) %&gt;% arrange.(muni_id, year) %&gt;% mutate.( median_2019_kDKK_m2_dif = 100 * (median_2019_kDKK_m2 - first(median_2019_kDKK_m2)) / first(median_2019_kDKK_m2), .by = muni_id) # Add spatial information dk_muni_prices &lt;- dk_muni %&gt;% left_join.(res_prices_muni, by = &quot;muni_id&quot;) %&gt;% st_sf() Plots variation over time (adjusted prices) # Short municipalities b population (e.g same order than pop_muni) lvls &lt;- levels(pop_muni$muni_name) dk_muni_prices &lt;- dk_muni_prices %&gt;% mutate(muni_name = factor(muni_name, levels = lvls)) # Plot ggplot() + geom_line(data = dk_muni_prices, aes(x = year, y = median_2019_kDKK_m2_dif)) + geom_hline(yintercept = 0, linetype=&quot;dashed&quot;, color = &quot;grey&quot;, size = 0.5) + facet_wrap(~muni_name, ncol = 6) + theme_bw() + theme(legend.position = &quot;bottom&quot;, axis.text = element_text(size = 10), axis.title = element_text(size = 14), legend.text = element_text(size = 14), legend.title = element_text(size = 14, face = &quot;bold&quot;), plot.title = element_text(size = 14, face = &quot;bold&quot;), title = element_text(size = 14)) + scale_y_continuous(name = &quot;[%]&quot;) + coord_cartesian(ylim = c(-80, 80)) + scale_x_continuous(name = &quot;&quot;, breaks = seq(2008, 2019, 3)) Figure 2.1: Adjusted median house price (kDKK/m2) change from 2008 Prices # Make intervals brks &lt;- dk_muni_prices$median_2019_kDKK_m2_dif %&gt;% quantile(seq(0,1,0.1),na.rm = T) dk_muni_prices &lt;- dk_muni_prices %&gt;% mutate(median_2019_kDKK_m2_dif_brk = cut(dk_muni_prices$median_2019_kDKK_m2_dif, breaks = brks, include.lowest = TRUE)) # Aux. function for plotting f_plot &lt;- function(df) { ggplot() + geom_sf(data = df, aes(fill = median_2019_kDKK_m2_dif_brk), color = &quot;grey&quot;, size = 0.05) + # scale_fill_gradient2(name = &quot;Change [%]&quot;, # low = &quot;blue&quot;, # mid = &quot;white&quot;, # high = &quot;red&quot;, # midpoint = 0, # limits = c(-100, 300)) + scale_fill_brewer(name = &quot;Change [%]&quot;, palette = &quot;RdYlBu&quot;, direction = -1, drop = FALSE) + my_theme_map() + labs(subtitle = paste(&quot;Date&quot;, df$year, sep = &quot;: &quot;), x = &quot;&quot;, y = &quot;&quot;) } # Plot each year plan(multisession, workers = 7) plts &lt;- dk_muni_prices %&gt;% filter(muni_id != &quot;0411&quot;) %&gt;% group_split(year) %&gt;% future_map(., .f = f_plot, .options = furrr_options(seed = 123)) plan(&quot;default&quot;) # Animation for(i in seq_along(plts)) { print(plts[[i]]) } Figure 2.2: Adjusted 2019 housing prices variation (baseline 2008) References "]]
