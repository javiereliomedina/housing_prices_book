[["dist-CBD.html", "Chapter 6 Distance to Central Business District", " Chapter 6 Distance to Central Business District The distance between a house and the Central Business District (CBD) has an important role in its price (Chen and Hao (2008)). We add thereofre it as another feature in our model, with a possitive expected effec (i.e. the closer the house to the CBT, the higer the price). However, we do not measure the distance in km but the commuting time from the house to the CBD (i.e. Indre By). In this regard, we estimate the travel time (in public transport) from the centre of each grid cell of 100m x 100m to Kongens Nytorv (coordinates: 55.6805° N, 12.5860° E), and we associate the time to all dwellings at that grid. # Kongens Nytorv KN &lt;- tibble(name = &quot;Kongens Nytorv&quot;, x = 12.5860, y = 55.6805) %&gt;% st_as_sf(coords = c(&quot;x&quot;, &quot;y&quot;)) %&gt;% st_set_crs(&quot;EPSG:4326&quot;) We have used used the Open Source Routing Machine API (Giraud (2021)) for calculating the travel times by foot, bike, and car (Figure ??). # # NOTE: Distance by foot in min # # It is a long process so we only run it once, and safe the results # # uncomment for re-run the code # # # Origin points # op &lt;- grids100m$data_points[[1]] %&gt;% # st_transform(crs = &quot;EPSG:4326&quot;) # # # Aux. function # f_osmr &lt;- function(df, profile) { # df %&gt;% # mutate(dist_min = osrmTable(src = ., dst = KN, osrm.profile = profile) %&gt;% # pluck(&quot;durations&quot;) %&gt;% # as.vector()) # } # # # Split data in smaller parts (for API restrictions) # chunk &lt;- 350 # n &lt;- nrow(op) # r &lt;- rep(1:ceiling(n/chunk), each = chunk)[1:n] # d &lt;- split(op, r) # # # Calculate distance to city centre by foot # plan(multisession, workers = 7) # # ## By foot # dist_foot_1 &lt;- map_dfr(d[ 1:7], ~f_osmr(., &quot;foot&quot;)) # dist_foot_2 &lt;- map_dfr(d[ 8:14], ~f_osmr(., &quot;foot&quot;)) # dist_foot_3 &lt;- map_dfr(d[15:21], ~f_osmr(., &quot;foot&quot;)) # dist_foot_4 &lt;- map_dfr(d[22:31], ~f_osmr(., &quot;foot&quot;)) # # Merge # dist_foot &lt;- bind_rows(dist_foot_1, dist_foot_2, dist_foot_3, dist_foot_4) # # Save # saveRDS(dist_foot, file = &quot;dist_osrm_foot.rds&quot;) # # ## Bike # dist_bike_1 &lt;- map_dfr(d[ 1:7], ~f_osmr(., &quot;bike&quot;)) # dist_bike_2 &lt;- map_dfr(d[ 8:14], ~f_osmr(., &quot;bike&quot;)) # dist_bike_3 &lt;- map_dfr(d[15:21], ~f_osmr(., &quot;bike&quot;)) # dist_bike_4 &lt;- map_dfr(d[22:31], ~f_osmr(., &quot;bike&quot;)) # # Merge # dist_bike &lt;- bind_rows(dist_bike_1, dist_bike_2, dist_bike_3, dist_bike_4) # # Save # saveRDS(dist_bike, file = &quot;dist_osrm_bike.rds&quot;) # # ## Car # dist_car_1 &lt;- map_dfr(d[ 1:7], ~f_osmr(., &quot;car&quot;)) # dist_car_2 &lt;- map_dfr(d[ 8:14], ~f_osmr(., &quot;car&quot;)) # dist_car_3 &lt;- map_dfr(d[15:21], ~f_osmr(., &quot;car&quot;)) # dist_car_4 &lt;- map_dfr(d[22:31], ~f_osmr(., &quot;car&quot;)) # # Merge # dist_car &lt;- bind_rows(dist_car_1, dist_car_2, dist_car_3, dist_car_4) # # Save # saveRDS(dist_car, file = &quot;dist_osrm_car.rds&quot;) # # plan(&quot;default&quot;) # Read data dist_foot &lt;- readRDS(file = &quot;dist_osrm_foot.rds&quot;) %&gt;% st_drop_geometry() %&gt;% rename(dist_min_foot = dist_min) dist_bike &lt;- readRDS(file = &quot;dist_osrm_bike.rds&quot;) %&gt;% st_drop_geometry() %&gt;% rename(dist_min_bike = dist_min) dist_car &lt;- readRDS(file = &quot;dist_osrm_car.rds&quot;) %&gt;% st_drop_geometry() %&gt;% rename(dist_min_car = dist_min) # Merge datasets dist &lt;- dist_foot %&gt;% left_join(dist_bike, by = &quot;grid_ID&quot;) %&gt;% left_join(dist_car, by = &quot;grid_ID&quot;) # Add info to grids100m grids100m &lt;- grids100m %&gt;% bind_cols(dist %&gt;% nest(dist = everything())) grids100m %&gt;% select(data_poly, dist) %&gt;% unnest(c(data_poly, dist), names_repair = &quot;minimal&quot;) %&gt;% pivot_longer(-c(grid_ID, geometry), names_to = &quot;feature&quot;, values_to = &quot;duration&quot;) %&gt;% mutate(feature = gsub(&quot;dist_min_&quot;, &quot;&quot;, feature), feature = factor(feature, levels = c(&quot;foot&quot;, &quot;bike&quot;, &quot;car&quot;))) %&gt;% st_sf() %&gt;% ggplot() + geom_sf(aes(fill = cut(duration, breaks = c(0, 5, 10, 15, 20, 30, 40, 50, 100, ceiling(max(duration))), include.lowest = TRUE)), col = NA) + scale_fill_viridis_d(name = &quot;min&quot;, option = &quot;magma&quot;, direction = -1) + geom_sf(data = cph_parish, fill = NA, color = &quot;grey50&quot;, size = 0.05) + geom_sf(data = KN, color = &quot;blue&quot;, shape = 16, size = 3) + theme_void() + facet_wrap(~feature, ncol = 2) Figure 6.1: Travel times to Kongens Nytorv (blue point) by foot, bike, and car "]]
