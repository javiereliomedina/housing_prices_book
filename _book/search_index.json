[["open-street-map.html", "Chapter 6 Open Street Map 6.1 Get data 6.2 Potential model", " Chapter 6 Open Street Map 6.1 Get data We get location information from Open Street Map. We select services inside a buffer of approx. 2 km around the study area (Figure 6.1), assuming that people may use then (e.g. parks, parking areas) outside Copenhagen City but they are close enough to they houses. A park is an area of open space for recreational use, usually designed and in semi-natural state with grassy areas, trees and bushes - OMS. # Area for OSM data: Copenhagen CPH_osm_bb &lt;- getbb(&quot;Copenhagen&quot;) # Bounding of the study area (approx. buffer of 2km) box &lt;- c(xmin = 714906, xmax = 733618, ymin = 6166579, ymax = 6184092) bbox &lt;- st_bbox(box) bbox_sf &lt;- st_as_sfc(bbox) %&gt;% st_set_crs(&quot;EPSG:25832&quot;) #&#39; Function for downloading data from OMS #&#39; @param bb Bounding box from the area we will get the OSM data (from osmdata::getbb()) #&#39; @param type name we give to the data (e.g. parking) #&#39; @param key Feature key #&#39; @param value Value for feature key; can be negated with an initial exclamation mark, value = &quot;!this&quot;, and can also be a vector, value = c (&quot;this&quot;, &quot;that&quot;) #&#39; @param bbox Crop results to the area of interest (e.g. Bounding of the study) f_osm_poly &lt;- function(bb, type, key, value, bbox = bbox_sf) { bb %&gt;% opq() %&gt;% add_osm_feature(key = key, value = value) %&gt;% osmdata_sf() %&gt;% # Extract polygons pluck(&quot;osm_polygons&quot;) %&gt;% # Transform CRS st_transform(crs = &quot;EPSG:25832&quot;) %&gt;% # Add column with the name of the feature mutate(type = type) %&gt;% # Get only columns with the name of the feature and the OSM id select(osm_id, type) %&gt;% # Calculate the area of the polygons mutate(area_m2 = as.numeric(units::set_units(st_area(.), m^2))) %&gt;% # Crop to area of interest st_crop(bbox) } # List of OSM data to retrieve osm_data_list &lt;- tribble( ~bb, ~type, ~key, ~value, CPH_osm_bb, &quot;Parking&quot;, &quot;amenity&quot;, &quot;parking&quot;, CPH_osm_bb, &quot;Park&quot;, &quot;leisure&quot;, c(&quot;park&quot;, &quot;garden&quot;, &quot;playground&quot;), CPH_osm_bb, &quot;Forest&quot;, &quot;landuse&quot;, c(&quot;forest&quot;, &quot;allotments&quot;, &quot;meadow&quot;), CPH_osm_bb, &quot;Forest&quot;, &quot;natural&quot;, &quot;scrub&quot;) # Get data osm_download &lt;- osm_data_list %&gt;% # Get polygons mutate(data_poly = pmap(., f_osm_poly)) # Extract polygons and merge by type osm_data &lt;- osm_download$data_poly %&gt;% bind_rows() %&gt;% group_by(type) %&gt;% nest() %&gt;% rename(data_poly = data) %&gt;% # Get centroids mutate(data_point = map(data_poly, ~st_centroid(.))) # Plot data osm_data %&gt;% unnest(c(data_poly)) %&gt;% st_sf() %&gt;% ggplot() + geom_sf(data = st_crop(dk_country, bbox_sf), fill = &quot;grey95&quot;) + geom_sf(data = cph_parish, fill = &quot;grey85&quot;, color = &quot;grey50&quot;, size = 0.05) + geom_sf(fill = &quot;#D55E00&quot;, col = NA) + labs(caption = &quot;Source: Open Street Map&quot;) + my_theme_map() + facet_wrap(~type) Figure 6.1: OMS data 6.2 Potential model Spatial interaction function (Figure 6.2). par(mfrow=c(1,2)) plot_inter(fun = &quot;e&quot;, span = 300, beta = 2) plot_inter(fun = &quot;e&quot;, span = 1500, beta = 2) Figure 6.2: Spatial interaction function Potential model (Figure 6.3) # Based on: https://riatelab.github.io/potential/articles/potential.html # Points to estimate the potential grids100m_cent &lt;- st_centroid(grids100m) # Set Spatial interaction function (fun, span, beta) sif &lt;- tribble( ~type, ~fun, ~span, ~beta, &quot;Parking&quot;, &quot;e&quot;, 300, 2, &quot;Park&quot;, &quot;e&quot;, 300, 2, &quot;Forest&quot;, &quot;e&quot;, 1500, 2) # Add to osm_data osm_data &lt;- osm_data %&gt;% left_join(sif, by = &quot;type&quot;) # Aux. function for calculating the potential f_pot &lt;- function(df, fun, span, beta) { mcpotential(x = df, y = grids100m_cent, var = &quot;area_m2&quot;, fun = fun, span = span, beta = beta, limit = 5 * span) } # Estimate potential (in percentage) pot_est &lt;- list() for(i in seq_along(osm_data$data_point)) { # Values potential &lt;- f_pot(osm_data$data_point[[i]], osm_data$fun[i], osm_data$span[i], osm_data$beta[i]) # Percentage relatively to the maximun pot_est[[i]] &lt;- 100 * potential / max(potential) # Add names names(pot_est)[[i]] &lt;- osm_data$type[i] } # Add estimated values to the grid cells of 100 x 100 m (grids100m) pot &lt;- rbind(pot_est) %&gt;% as_tibble() %&gt;% unnest(everything()) grids100m_pot &lt;- grids100m %&gt;% bind_cols(pot) # Plots grids100m_pot %&gt;% select(-int) %&gt;% as_tibble() %&gt;% pivot_longer(-c(grid_ID, geometry), names_to = &quot;type&quot;, values_to = &quot;value&quot;) %&gt;% st_sf() %&gt;% ggplot() + geom_sf(aes(fill = value), col = NA) + scale_fill_viridis_c(name = &quot;[%]&quot;, option = &quot;magma&quot;, direction = -1) + geom_sf(data = cph_parish, fill = NA, color = &quot;grey50&quot;, size = 0.05) + my_theme_map() + facet_wrap(~type) Figure 6.3: Potential model "]]
