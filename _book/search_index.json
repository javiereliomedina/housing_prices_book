[["open-street-map.html", "Chapter 7 Open Street Map 7.1 Areal features 7.2 Point features", " Chapter 7 Open Street Map We get location information from Open Street Map. We select services inside a buffer of approx. 2 km around the study area (Figure 7.1), assuming that people may use then (e.g. parks, parking areas) outside Copenhagen City but they are close enough to they houses. A park is an area of open space for recreational use, usually designed and in semi-natural state with grassy areas, trees and bushes - OSM. 7.1 Areal features The mass of the service (\\(M_j\\)) for the potential model is the area (in \\(m^2\\)) of the feature. Hospital, and Schools (e.g. schools) may create traffic and noise. Therefore, they may have a negative effect on housing prices (Gultekin and Yamamura (2006)). # List of OSM data # Available features: https://wiki.openstreetmap.org/wiki/Map_features osm_poly_list &lt;- tribble( ~feature, ~key, ~value, ~exp_effect, # Transportation &quot;Parking&quot;, &quot;amenity&quot;, &quot;parking&quot;, &quot;positive&quot;, # Green areas &quot;Park&quot;, &quot;leisure&quot;, c(&quot;park&quot;, &quot;garden&quot;, &quot;playground&quot;), &quot;positive&quot;, &quot;Forest&quot;, &quot;landuse&quot;, c(&quot;forest&quot;, &quot;allotments&quot;, &quot;meadow&quot;), &quot;positive&quot;, &quot;Forest&quot;, &quot;natural&quot;, &quot;scrub&quot;, &quot;positive&quot;, # Education &quot;School&quot;, &quot;amenity&quot;, c(&quot;school&quot;, &quot;kindergarten&quot;), &quot;negative&quot;, &quot;University&quot;, &quot;amenity&quot;, c(&quot;university&quot;, &quot;college&quot;), &quot;positive&quot;, # Healthcare &quot;Hospital&quot;, &quot;amenity&quot;, &quot;hospital&quot;, &quot;negative&quot;, &quot;Social facility&quot;, &quot;amenity&quot;, &quot;social_facility&quot;, &quot;negative&quot;, #Entertainment, Arts &amp; Culture.... ) osm_poly_list &lt;- osm_poly_list %&gt;% unnest(c(value)) %&gt;% as.data.table() osm_poly_list %&gt;% kbl() feature key value exp_effect Parking amenity parking positive Park leisure park positive Park leisure garden positive Park leisure playground positive Forest landuse forest positive Forest landuse allotments positive Forest landuse meadow positive Forest natural scrub positive School amenity school negative School amenity kindergarten negative University amenity university positive University amenity college positive Hospital amenity hospital negative Social facility amenity social_facility negative # Bounding of the study area (approx. buffer of 2km) box &lt;- c(xmin = 714906, xmax = 733618, ymin = 6166579, ymax = 6184092) bbox &lt;- st_bbox(box) bbox_sf &lt;- st_as_sfc(bbox) %&gt;% st_set_crs(&quot;EPSG:25832&quot;) # Get polygons osm_poly_dnld &lt;- oe_get(place = &quot;Copenhagen&quot;, layer = &quot;multipolygons&quot;) %&gt;% # Convert to data.table as.data.table() %&gt;% # Long format melt(id.vars = c(&quot;osm_id&quot;, &quot;osm_way_id&quot;, &quot;type&quot;, &quot;name&quot;, &quot;geometry&quot;), variable.name = &quot;key&quot;, value.name = &quot;value&quot;) # Reading layer `multipolygons&#39; from data source `C:\\OSM_data\\geofabrik_Copenhagen.gpkg&#39; using driver `GPKG&#39; # Simple feature collection with 376968 features and 25 fields # Geometry type: MULTIPOLYGON # Dimension: XY # Bounding box: xmin: 12.3 ymin: 55.6 xmax: 12.7 ymax: 55.8 # Geodetic CRS: WGS 84 # Merge and convert to sf osm_poly &lt;- merge(osm_poly_list, osm_poly_dnld, by = c(&quot;key&quot;, &quot;value&quot;)) %&gt;% # Convert to sf object st_sf() %&gt;% # Transform CRS st_transform(&quot;EPSG:25832&quot;) %&gt;% # Remove non-valid polygons (i.e. 2 polygons) mutate(valid = st_is_valid(.)) %&gt;% filter(!is.na(valid)) %&gt;% # Calculate the area of the polygons mutate(area_m2 = as.numeric(units::set_units(st_area(.), m^2))) %&gt;% # crop to Bounding of the study area %&gt;% st_crop(bbox_sf) %&gt;% # Nest by feature group_by(feature) %&gt;% nest() %&gt;% rename(data_poly = data) %&gt;% # Get centroids mutate(data_points = map(data_poly, st_centroid)) osm_poly %&gt;% unnest(c(data_poly)) %&gt;% st_sf() %&gt;% ggplot() + geom_sf(data = st_crop(dk_country, bbox_sf), fill = &quot;grey95&quot;) + geom_sf(data = cph_parish, fill = &quot;grey85&quot;, color = &quot;grey50&quot;, size = 0.05) + geom_sf(fill = &quot;#D55E00&quot;, col = NA) + labs(caption = &quot;Source: Open Street Map&quot;) + my_theme_map() + facet_wrap(~feature) Figure 7.1: OSM data 7.1.1 Potential model Spatial interaction function (Figure 7.2). par(mfrow=c(1,2)) plot_inter(fun = &quot;e&quot;, span = 300, beta = 2) plot_inter(fun = &quot;e&quot;, span = 2000, beta = 2) Figure 7.2: Spatial interaction function Potential model (Figure 7.3) # Based on: https://riatelab.github.io/potential/articles/potential.html # Set Spatial Interaction Function (fun, span, beta) sif &lt;- tribble( ~feature, ~fun, ~span, ~beta, &quot;Parking&quot;, &quot;e&quot;, 300, 2, &quot;Park&quot;, &quot;e&quot;, 300, 2, &quot;Forest&quot;, &quot;e&quot;, 2000, 2, &quot;School&quot;, &quot;e&quot;, 300, 2, &quot;University&quot;, &quot;e&quot;, 300, 2, &quot;Sustenance&quot;, &quot;e&quot;, 300, 2, &quot;Hospital&quot;, &quot;e&quot;, 300, 2, &quot;Social facility&quot;, &quot;e&quot;, 300, 2 ) # Add to osm_data osm_poly &lt;- osm_poly %&gt;% left_join(sif, by = &quot;feature&quot;) # Points to estimate the potential grids100m &lt;- grids100m %&gt;% # Nesting nest(data_poly = everything()) %&gt;% # add centroids of the grids mutate(data_points = map(data_poly, ~st_centroid(.))) # Aux. function for calculating the potential f_pot &lt;- function(df, fun, span, beta) { mcpotential(x = df, y = grids100m$data_points[[1]], var = &quot;area_m2&quot;, fun = fun, span = span, beta = beta, limit = 5 * span) } # Estimate potential (in percentage) pot_est &lt;- list() for(i in seq_along(osm_poly$data_points)) { # Values potential &lt;- f_pot(osm_poly$data_points[[i]], osm_poly$fun[i], osm_poly$span[i], osm_poly$beta[i]) # Percentage relatively to the maximun pot_est[[i]] &lt;- 100 * potential / max(potential) # Add names names(pot_est)[[i]] &lt;- osm_poly$feature[i] } # Add values to the grid cells of 100 x 100 m (grids100m) pot &lt;- rbind(pot_est) %&gt;% as_tibble() %&gt;% unnest(everything()) grids100m &lt;- grids100m %&gt;% bind_cols(pot %&gt;% nest(pot = everything())) # Plots grids100m %&gt;% select(data_poly, pot) %&gt;% unnest(c(data_poly, pot)) %&gt;% pivot_longer(-c(grid_ID, geometry), names_to = &quot;feature&quot;, values_to = &quot;value&quot;) %&gt;% st_sf() %&gt;% ggplot() + geom_sf(aes(fill = value), col = NA) + scale_fill_viridis_c(name = &quot;[%]&quot;, option = &quot;magma&quot;, direction = -1) + geom_sf(data = cph_parish, fill = NA, color = &quot;grey50&quot;, size = 0.05) + my_theme_map() + facet_wrap(~feature) Figure 7.3: Potential model 7.2 Point features Features: (Figure 7.4) The mass of the service (\\(M_j\\)) for the potential model is the same for all the points (i.e. 1). Sustenance: bar, cafe, pubs, etc. Shops: supermarket, mall, butcher, etc. # Sustenance (points) osm_points_list &lt;- tribble( ~feature, ~key, ~value, ~exp_effect, # Sustenance &quot;Sustenance&quot;, &quot;amenity&quot;, c(&quot;bar&quot;, &quot;biergarten&quot;, &quot;cafe&quot;, &quot;fast_food&quot;, &quot;food_court&quot;, &quot;ice_cream&quot;, &quot;pub&quot;, &quot;restaurant&quot;), &quot;-&quot;, # Shops &quot;Shop&quot;, &quot;shop&quot;, c(&quot;supermarket&quot;, &quot;mall&quot;, &quot;general&quot;, &quot;dairy&quot;, &quot;department_store&quot;, &quot;butcher&quot;, &quot;seafood&quot;, &quot;bakery&quot;, &quot;convenience&quot;), &quot;+&quot; ) %&gt;% unnest() %&gt;% unnest(cols = c(value)) %&gt;% as.data.table() osm_points_dnld &lt;- oe_get(place = &quot;Copenhagen&quot;, layer = &quot;points&quot;, extra_tags = c(&quot;amenity&quot;, &quot;shop&quot;), provider = &quot;bbbike&quot;) %&gt;% # Convert to data.table as.data.table() %&gt;% # Long format melt(id.vars = c(&quot;osm_id&quot;, &quot;name&quot;, &quot;address&quot;, &quot;geometry&quot;), variable.name = &quot;key&quot;, value.name = &quot;value&quot;) # Reading layer `points&#39; from data source `C:\\OSM_data\\bbbike_Copenhagen.gpkg&#39; using driver `GPKG&#39; # Simple feature collection with 399818 features and 12 fields # Geometry type: POINT # Dimension: XY # Bounding box: xmin: 12.3 ymin: 55.6 xmax: 12.7 ymax: 55.8 # Geodetic CRS: WGS 84 osm_points &lt;- merge(osm_points_list, osm_points_dnld, by = c(&quot;key&quot;, &quot;value&quot;)) %&gt;% # Convert to sf object st_sf() %&gt;% # Transform CRS st_transform(&quot;EPSG:25832&quot;) %&gt;% # crop to Bounding of the study area %&gt;% st_crop(bbox_sf) %&gt;% # Nest by feature group_by(feature) %&gt;% nest() %&gt;% rename(data_points = data) osm_points %&gt;% unnest(cols = c(data_points)) %&gt;% st_sf() %&gt;% ggplot() + geom_sf(data = st_crop(dk_country, bbox_sf), fill = &quot;grey95&quot;) + geom_sf(data = cph_parish, fill = &quot;grey85&quot;, color = &quot;grey50&quot;, size = 0.05) + geom_sf(colour = &quot;#D55E00&quot;, size = 0.5) + labs(caption = &quot;Source: Open Street Map&quot;) + my_theme_map() + facet_wrap(~feature) Figure 7.4: OSM data points "]]
