[["pop-growth.html", "Chapter 1 Population growth", " Chapter 1 Population growth Migration and housing prices are closely related with profound implications on urban planning. In this sense, there is a two-way causal relationship between migration and house prices (e.g. Lin et al. (2018), Jeanty, Partridge, and Irwin (2010)). On the one hand, a rise on house prices will increase households housing equity and, therefore, migration since homeowners have a higher financial flexibility for purchasing a new house. However, at the same time, high housing prices can make the house unaffordable. Prices differences between the region where migrants live and regions where they intend to move may also affect in- and out- migration rates. Finally, the expectation of future house prices also plays an important role in the decision to move (Peng and Tsai (2019)). On the other hand, migration increases the housing demand and, as a consequence, the prices (Wang, Hui, and Sun (2017)). An example of this effect has been found in Sweden where a 1% increase in the foreign-born population results in a 0.8% increase in house prices, which increases to 1.2% if internal migration is also accounted for (Tyrcha and Abreu (2019)). We will therefore link housing prices, population and migration patterns in Denmark, evaluating the influence of housing prices on migration (and vice versa). Specific questions we will respond are, among others: How have housing prices changed over time in Denmark? How does it affect mobility and the population of a region? What is the effect of immigration on housing prices? What is the percentage of immigrants that own/rent a property? Is there racial segregation of immigrants? How does it affect mobility? Do the developments of housing prices in areas with significantly higher (or lower) representation of immigrants differ from the developments in nearby areas? If there is an effect, does it differ depending on the immigrants country of origin? Danish population has growth over the last decade from 5.47 million (2008-Q1) to 5.82 million (2020-Q3). However, this increase is mainly due to foreign population. In this sense, the foreigners have raised from 0.30 million to 0.53 million (80%) while Danish citizens has growth from 5.18 million to 5.29 million (2.5%). Therefore, from the increase of almost 350,000 inhabitants over the last decade approximately 66% are immigrants. The population is also getting older with an increase of both the mean and median age of the population. However, there is a significant difference between the mean and median ages of Danish and Foreign citizens, with these values around 40-42 years and 32-34 years respectively. Furthermore, these values have raised for the Danish population but not for foreigners. Another consideration is that the mean age for Danish citizens is less than the median, which indicates that the distribution is skewed to the left (i.e. more elderly people), However, for the foreign population it is the other way around (i.e. the majority are young people). # Load data ---- ## Data from Statistic Denmark: https://www.statbank.dk/10021 (load with {danstat}) ## Subjects of interest (Population and elections - 02) subj &lt;- get_subjects(subjects = &quot;02&quot;) sub_subj &lt;- subj$subjects %&gt;% bind_rows() ## Getting table information and variables ## immigrants and their descendants (2402) tables &lt;- get_tables(subjects = &quot;2402&quot;) ## Metadata table of interest (e.g. KMSTA001) var_pop &lt;- get_table_metadata(table_id = &quot;FOLK1D&quot;, variables_only = TRUE) ## pull the needed data from the API ### Variables we would like to get data var_input &lt;- list(list(code = &quot;OMRÅDE&quot;, values = &quot;000&quot;), list(code = &quot;KØN&quot;, values = c(1,2)), list(code = &quot;ALDER&quot;, values = seq(0, 125, 1)), list(code = &quot;STATSB&quot;, values = c(&quot;DANSK&quot;, &quot;UDLAND&quot;)), list(code = &quot;tid&quot;, values = NA)) ### Get data get_data(&quot;FOLK1D&quot;, variables = var_input) %&gt;% rename(Country = OMRÅDE, Gender = KØN, Age = ALDER, Citizen = STATSB, Year = TID, Pop = INDHOLD) %&gt;% mutate(Country = &quot;Denmark&quot;, Citizen = case_when(Citizen == &quot;Danish citizen&quot; ~ &quot;Danish&quot;, Citizen == &quot;Foreign citizen&quot; ~ &quot;Foreign&quot;), Date = gsub(&quot;Q&quot;, &quot;&quot;, Year), Date = as.integer(Date), Date = as_date_yq(Date), Date = first_of_quarter(Date) ) %&gt;% separate(Year, c(&quot;Year&quot;, &quot;Quarter&quot;), sep = &quot;Q&quot;) %&gt;% mutate(Year = as.integer(Year), Quarter = as.integer(Quarter)) %&gt;% mutate(Age = parse_number(Age), Age = as.integer(Age)) %&gt;% # Add rows with total pop by age pivot_wider(names_from = &quot;Citizen&quot;, values_from = c(&quot;Pop&quot;)) %&gt;% mutate(Total = Danish + Foreign) %&gt;% pivot_longer(cols = c(Danish, Foreign, Total), names_to = &quot;Citizen&quot;, values_to = &quot;Pop&quot;) %&gt;% # Add population in percentage (%) group_by(Date) %&gt;% mutate(Pop_per = 100 * Pop / sum(Pop)) %&gt;% ungroup() -&gt; pop_ctzn_age ## Total population by quarter and citizenship pop_ctzn_age %&gt;% group_by(Date, Citizen) %&gt;% # Add summary statistics (mean and median age) summarise(Pop_total = sum(Pop), Age_mean = weighted.mean(Age, Pop), Age_median = matrixStats::weightedMedian(Age, Pop)) %&gt;% ungroup() %&gt;% # Standardize it to % change with 2008-Q1 as baseline group_by(Citizen) %&gt;% arrange(Date, Citizen) %&gt;% mutate(pct_change_2008 = (Pop_total/first(Pop_total) - 1) * 100) %&gt;% ungroup() -&gt; pop_ctzn_ttl_quarter # Plots ---- ## Population growth ---- ## Plots ggplot() + geom_line(data = pop_ctzn_ttl_quarter, aes(x = Date, y = Pop_total/1000, col = Citizen)) + labs(title = &quot;Danish population (2008 - 2020)&quot;, subtitle = &quot;Total population&quot;, y = &quot;x1000&quot;) + theme_bw() -&gt; p1 ggplot() + geom_line(data = pop_ctzn_ttl_quarter, aes(x = Date, y = pct_change_2008, col = Citizen)) + labs(title = &quot;&quot;, subtitle = &quot;Percentage of change&quot;, y = &quot;%&quot;) + theme_bw() -&gt; p2 ggplot() + geom_line(data = pop_ctzn_ttl_quarter, aes(x = Date, y = Age_median, colour = Citizen, linetype = &quot;Median&quot;)) + geom_line(data = pop_ctzn_ttl_quarter, aes(x = Date, y = Age_mean, colour = Citizen, linetype = &quot;Mean&quot;)) + scale_linetype_discrete(name = &quot;Age&quot;) + labs(title = &quot;&quot;, subtitle = &quot;Age variation&quot;, y = &quot;Age&quot;) + theme_bw() -&gt; p3 p1 + p2 + p3 Figure 1.1: Danish population from 2008-2020 The population pyramid also confirms this tendency (figure 1.2). We can see an increase of the percentage of the old dependency people (i.e. &gt; 65 years old), while the percentages of young people (&lt;18 years) has been reduced (lower birth rate with time). Foreign citizens have also increases, with the majority in the economically active region (i.e. 25-35 years old). The bulge in this region may indicate a period of immigration and/or a baby boom years before. The number of young people in this population has also increased, in comparison to the first day of 2008 (Is it due to a high birth rate among foreigner and/or because migrants came to Denmark with their family/children?). However, we see a narrow shape at the top of the curve, which indicate that low proportion of foreigners get older in Denmark. A narrow shape usually means high death rates in the population; however, it is not plausible in Denmark and it may be more reasonable to think that migrants return to their countries after retirement. # Pop data id_table &lt;- &quot;FOLK1C&quot; var_pop &lt;- get_table_metadata(table_id = id_table, variables_only = TRUE) # Loop by quarter for getting the data steps &lt;- function(quarter){ var_values &lt;- list(id_region, id_gender, id_age, id_ancestry, id_citizen, quarter) var_input &lt;- purrr::map2(.x = var_codes, .y = var_values, .f = ~list(code = .x, values = .y)) get_data(id_table, variables = var_input) } # Codes for var_input var_codes &lt;- c(&quot;OMRÅDE&quot;, &quot;KØN&quot;, &quot;ALDER&quot;, &quot;HERKOMST&quot;, &quot;IELAND&quot;, &quot;Tid&quot;) # Values for var_input ## Region: Denmark id_region &lt;- &quot;000&quot; ## Gender: Men/Women id_gender &lt;- c(1, 2) ## Age (remove total) id_age &lt;- subset(var_pop$values[[3]], id != &quot;IALT&quot;)$id ## Ancestry id_ancestry &lt;- c(5, 4, 3) ## country of origin (remove total) id_citizen &lt;- as.numeric(var_pop$values[[5]]$id) id_citizen &lt;- id_citizen[id_citizen &gt; 0] ## Quarters (e.g. 2008-Q1 and 2019-Q1) id_quarter &lt;- c(&quot;2008K1&quot;, &quot;2019K1&quot;) # Get data pop_DK &lt;- id_quarter %&gt;% map_dfr(steps) %&gt;% # Clean column names and format some data filter(INDHOLD &gt; 0) %&gt;% rename(region = OMRÅDE, gender = KØN, age = ALDER, ancestry = HERKOMST, origin = IELAND, date = TID, pop = INDHOLD) %&gt;% mutate(date = gsub(&quot;Q&quot;, &quot;&quot;, date), date = as_date_yq(as.integer(date)), date = first_of_quarter(date)) %&gt;% mutate(region = ifelse(region == &quot;All Denmark&quot;, &quot;Denmark&quot;, NA)) %&gt;% # Format ancestry and age mutate(ancestry = ifelse(ancestry == &quot;Persons of Danish origin&quot;, &quot;Danish&quot;, ancestry), ancestry = factor(ancestry), ancestry = fct_relevel(ancestry, &quot;Immigrants&quot;, after = 1) ) %&gt;% # Format &quot;age&quot; mutate(age = ifelse(age == &quot;100 years and over&quot;, &quot;100OV&quot;, age), age = gsub(&quot; years&quot;, &quot;&quot;, age), age = factor(age, levels = id_age)) %&gt;% # Calculate population in percentage group_by(date) %&gt;% mutate(pop_per = 100 * pop / sum(pop)) %&gt;% ungroup(date) # Plot population pyramid brks_y &lt;- seq(-4, 4, 1) lmts_y = c(min(brks_y), max(brks_y)) lbls_y &lt;- paste0(as.character(abs(brks_y)), &quot;%&quot;) pop_DK %&gt;% ggpyramid(values = pop_per, fill = ancestry) + scale_fill_manual(name = &quot;Ancestry&quot;, values = c(&quot;#0072B2&quot;, &quot;#F0E442&quot;, &quot;#D55E00&quot;)) + scale_y_continuous(name = NULL, breaks = brks_y, labels = lbls_y, limits = lmts_y) + labs(caption = &quot;Source: Statistics Denmark&quot;) + geom_segment(data = pop_DK, aes(x = 4, xend = 4, y = -4, yend = 4), linetype = &quot;dashed&quot;) + geom_segment(data = pop_DK, aes(x = 13.5, xend = 13.5, y = -4, yend = 4), linetype = &quot;dashed&quot;) + ggplot2::annotate(geom = &quot;text&quot;, y = c(2 , 2), x = 20.5, label = &quot;Women&quot;, fontface = &quot;bold&quot;, size = 3) + ggplot2:::annotate(geom = &quot;text&quot;, y = c(-2,-2), x = 20.5, label = &quot;Men&quot;, fontface = &quot;bold&quot;, size = 3) + facet_grid( . ~ date) + theme_bw() Figure 1.2: Population pyramith of Denmark The urban areas (e.g. Copenhagn, Aalborg, Aarhus, Odese) have gained population from 2008 to 2020, while the rural regions have loss them (e.g. Lolland, Lemvig). It seems also that there are some influence from big cities, and people are moving from the rural areas into (or close to) the cities (figure 1.3). However, we do not see the same patter between the Danes and Immigrants and the number of immigrants and their descendants has increased all aver the country (figure 1.4), alleviating the population loss on rural areas. To what degree migrants and their descendants make up for the population loss in Danes without a migrant background over time? e.g. Do the Danes leave first and the migrants fill the gap? The majority of immigrants however live in big cities (Figure 5). Are there differences between migrants in urban-rural areas (e.g. skilled/non-skilled migrants due to job marked)? Are the Danish people in rural areas (red areas) older (e.g. young people are moving to the cities but elderly people stay there)? Are immigrants however young workers? Are these areas loosing population because low birth rates/high death? Low in-migration? # Load data ---- id_table &lt;- &quot;FOLK1C&quot; var_pop &lt;- get_table_metadata(table_id = id_table, variables_only = TRUE) # loop by quarter for getting the data steps &lt;- function(quarter){ var_values &lt;- list(id_region, id_ancestry, quarter) var_input &lt;- purrr::map2(.x = var_codes, .y = var_values, .f = ~list(code = .x, values = .y)) get_data(id_table, variables = var_input) } # Codes for var_input var_codes &lt;- c(&quot;OMRÅDE&quot;, &quot;HERKOMST&quot;, &quot;Tid&quot;) # Values for var_input ## Region: Denmark id_region &lt;- as.numeric(var_pop$values[[1]]$id) id_region &lt;- id_region[id_region &gt; 100] ## Ancestry id_ancestry &lt;- NA ## Quarters id_quarter &lt;- var_pop$values[[6]]$id[1:45] # Select all quarters # Parallel process with {future} plan(multisession) pop_LAU &lt;- id_quarter %&gt;% future_map(steps) pop_LAU &lt;- bind_rows(pop_LAU) plan(&quot;default&quot;) # Clean column names and format some data pop_LAU &lt;- pop_LAU %&gt;% rename(LAU_NAME = OMRÅDE, ancestry = HERKOMST, date = TID, pop = INDHOLD) %&gt;% mutate(date = gsub(&quot;Q&quot;, &quot;&quot;, date), date = as_date_yq(as.integer(date)), date = first_of_quarter(date)) %&gt;% mutate(LAU_NAME = gsub(&quot;Copenhagen&quot;, &quot;København&quot;, LAU_NAME), ancestry = ifelse(ancestry == &quot;Persons of Danish origin&quot;, &quot;Danish&quot;, ancestry)) %&gt;% # Short LAUs by Total population in 20208-Q1 pivot_wider(c(LAU_NAME, date), names_from = ancestry, values_from = pop) %&gt;% mutate(LAU_NAME = factor(LAU_NAME), LAU_NAME = fct_reorder2(LAU_NAME, date, Total, .fun = first2)) %&gt;% pivot_longer(cols = c(Total, Danish, Immigrants, Descendant), names_to = &quot;ancestry&quot;, values_to = &quot;pop&quot;) %&gt;% # Short ancestry mutate(ancestry = factor(ancestry), ancestry = fct_relevel(ancestry, &quot;Immigrants&quot;, after = 1)) %&gt;% # Standardize population growth to % change with 2008-Q1 as baseline group_by(LAU_NAME, ancestry) %&gt;% arrange(LAU_NAME, date) %&gt;% mutate(pop_pct_2008 = (pop/first(pop) - 1) * 100) %&gt;% ungroup() ## Local Administrative Units (LAU) ---- options(gisco_cache_dir = &quot;C:/GISCO_spatial_data&quot;) dk_lau &lt;- gisco_get_lau(year = &quot;2019&quot;, country = &quot;DNK&quot;) %&gt;% mutate(LAU_NAME = str_conv(LAU_NAME, &quot;UTF-8&quot;)) %&gt;% arrange(LAU_NAME) # Link population and LAUs dk_lau %&gt;% left_join(pop_LAU, by = &quot;LAU_NAME&quot;) %&gt;% st_as_sf() %&gt;% mutate(date = as.Date(date)) -&gt; dk_lau_pop # Big cities/urban areas big_cities &lt;- c(&quot;København&quot;, &quot;Aarhus&quot;, &quot;Odense&quot;, &quot;Aalborg&quot;) big_cities &lt;- dk_lau %&gt;% filter(LAU_NAME %in% big_cities) # Map ---- ## Differentiate by ancestry ## Ancestry: Total population, Persons of Danish origin, Immigrants, and Descendants # Annotate cities only in the &quot;Total&quot; facet big_cities &lt;- big_cities %&gt;% mutate(ancestry = &quot;Total&quot;, ancestry = factor(ancestry, levels = levels(dk_lau_pop$ancestry))) # Transform Percentage of change to factor pct_breaks &lt;- c(floor(min(dk_lau_pop$pop_pct_2008)), -10, -5, 0, 5, 10, 20, 30, 50, 100, 200, max(dk_lau_pop$pop_pct_2008)) dk_lau_pop %&gt;% mutate(pop_pct_2008_brk = cut(dk_lau_pop$pop_pct_2008, breaks = pct_breaks)) %&gt;% mutate(ancestry = factor(ancestry), ancestry = fct_relevel(ancestry, &quot;Total&quot;, after = 0))-&gt; dk_lau_pop myPallette &lt;- c(rev(brewer.pal(3, &quot;YlOrRd&quot;)), brewer.pal(9, &quot;Blues&quot;)) ggplot() + geom_sf(data = filter(dk_lau_pop, date == as.Date(&quot;2019-01-01&quot;), ancestry == &quot;Total&quot;), aes(fill = pop_pct_2008_brk), color = &quot;grey50&quot;, size = 0.05) + scale_fill_manual(name = &quot;Percentage&quot;, values = myPallette, drop = FALSE) + labs(x = &quot;&quot;, y = &quot;&quot;) + theme_void() + ylim(54.50, 58.0) + geom_sf_label_repel(data = big_cities, aes(label = LAU_NAME), force = 10, nudge_y = 3, nudge_x = 0.5, seed = 10) Figure 1.3: Population growth from 2008 to 2019 ggplot() + geom_sf(data = filter(dk_lau_pop, date == as.Date(&quot;2019-01-01&quot;), ancestry != &quot;Total&quot;), aes(fill = pop_pct_2008_brk), color = &quot;grey50&quot;, size = 0.05) + scale_fill_manual(name = &quot;Percentage&quot;, values = myPallette, drop = FALSE) + labs(x = &quot;&quot;, y = &quot;&quot;) + theme_void() + facet_wrap( ~ ancestry, ncol = 2) Figure 1.4: Population growth from 2008 to 2019 by ancestry Population change # Load data ---- id_table &lt;- &quot;FOLK1C&quot; var_pop &lt;- get_table_metadata(table_id = id_table, variables_only = TRUE) # loop by quarter for getting the data steps &lt;- function(quarter){ var_values &lt;- list(id_region, id_ancestry, quarter) var_input &lt;- purrr::map2(.x = var_codes, .y = var_values, .f = ~list(code = .x, values = .y)) get_data(id_table, variables = var_input) } # Codes for var_input var_codes &lt;- c(&quot;OMRÅDE&quot;, &quot;HERKOMST&quot;, &quot;Tid&quot;) # Values for var_input ## Region: Denmark id_region &lt;- as.numeric(var_pop$values[[1]]$id) id_region &lt;- id_region[id_region &gt; 100] ## Ancestry id_ancestry &lt;- NA ## Quarters id_quarter &lt;- var_pop$values[[6]]$id[1:45] # Parallel process with {future} plan(multisession) pop_LAU &lt;- id_quarter %&gt;% future_map(steps) pop_LAU &lt;- bind_rows(pop_LAU) plan(&quot;default&quot;) # Clean column names and format some data pop_LAU &lt;- pop_LAU %&gt;% rename(LAU_NAME = OMRÅDE, ancestry = HERKOMST, date = TID, pop = INDHOLD) %&gt;% mutate(date = gsub(&quot;Q&quot;, &quot;&quot;, date), date = as_date_yq(as.integer(date)), date = first_of_quarter(date)) %&gt;% mutate(LAU_NAME = gsub(&quot;Copenhagen&quot;, &quot;København&quot;, LAU_NAME), ancestry = ifelse(ancestry == &quot;Persons of Danish origin&quot;, &quot;Danish&quot;, ancestry)) %&gt;% # Sort LAUs by Total population in 2008-Q1c pivot_wider(c(LAU_NAME, date), names_from = ancestry, values_from = pop) %&gt;% mutate(LAU_NAME = factor(LAU_NAME), LAU_NAME = fct_reorder2(LAU_NAME, date, Total, .fun = first2)) %&gt;% pivot_longer(cols = c(Total, Danish, Immigrants, Descendant), names_to = &quot;ancestry&quot;, values_to = &quot;pop&quot;) # Merge Immigrants and Descendants pop_LAU %&gt;% pivot_wider(names_from = ancestry, values_from = pop) %&gt;% mutate(Foreign = Immigrants + Descendant) %&gt;% select(-Immigrants, -Descendant) %&gt;% pivot_longer(-c(LAU_NAME, date), names_to = &quot;ancestry&quot;, values_to = &quot;pop&quot;) -&gt; pop_LAU # Population growth (inhabitant and percentage) using 2008-Q1 as baseline pop_LAU &lt;- pop_LAU %&gt;% group_by(LAU_NAME, ancestry) %&gt;% arrange(LAU_NAME, date) %&gt;% mutate(pop_dif_2008 = pop - first(pop), pop_pct_2008 = (pop/first(pop) - 1) * 100) %&gt;% ungroup() %&gt;% # Sort ancestry mutate(ancestry = factor(ancestry, levels = c(&quot;Danish&quot;, &quot;Foreign&quot;, &quot;Total&quot;), labels = c(&quot;Danish&quot;, &quot;Foreign (Immigrants + Descendant)&quot;, &quot;Total&quot;))) pop_LAU %&gt;% ggplot(aes(x = date, y = pop_dif_2008/1000, colour = ancestry)) + geom_line( ) + geom_hline(yintercept = 0, linetype=&quot;dashed&quot;, color = &quot;grey&quot;, size = 0.5) + facet_wrap(~LAU_NAME, ncol = 6, scale = &quot;free&quot;) + theme_bw() + theme(legend.position = &quot;bottom&quot;, axis.text = element_text(size = 10), axis.title = element_text(size = 14), legend.text = element_text(size = 14), legend.title = element_text(size = 14, face = &quot;bold&quot;), plot.title = element_text(size = 14, face = &quot;bold&quot;), title = element_text(size = 14)) + scale_y_continuous(name = &quot;[x1000]&quot;) + scale_x_date(name = &quot;&quot;, date_breaks = &quot;3 year&quot;, date_labels = &quot;%y&quot;) + scale_colour_manual(name = &quot;Ancestry&quot;, values = c(&quot;#0072B2&quot;, &quot;#D55E00&quot;, &quot;#000000&quot;)) Figure 1.5: Population change (LAUs are shorted by the total population in 2019) The total number of immigrants and their descendants living in Denmark at the first day of the four quarter of 2020 is 814.5k. From them, Copenhagen accounts for approximately 20% (164k), and then another 20% lives in Aarhus (60k), Odense (34k), Aalborg (24k), Frederiksberg (20k), and Vejle (15.7k). # Load data ---- ## Population data from Statistic Denmark ---- ## Data from Statistic Denmark: https://www.statbank.dk/10021 ## Table: FOLK1C ## Population at the first day of the quarter by region, ancestry, and country of origin ## Subjects of interest: population and elections (02) ## Immigrants and their descendants (2402) id_table &lt;- &quot;FOLK1C&quot; var_pop &lt;- get_table_metadata(table_id = id_table, variables_only = TRUE) # loop by quarter for getting the data steps &lt;- function(quarter){ var_values &lt;- list(id_region, id_ancestry, id_citizen, quarter) var_input &lt;- purrr::map2(.x = var_codes, .y = var_values, .f = ~list(code = .x, values = .y)) get_data(id_table, variables = var_input) } # Codes for var_input var_codes &lt;- c(&quot;OMRÅDE&quot;, &quot;HERKOMST&quot;, &quot;IELAND&quot;, &quot;Tid&quot;) # Values for var_input ## Region: Denmark id_region &lt;- NA ## Ancestry (Immigrants and Descendant) id_ancestry &lt;- c(4, 3) ## Country of origin (remove total) id_citizen &lt;- as.numeric(var_pop$values[[5]]$id) id_citizen &lt;- id_citizen[id_citizen &gt; 0] ## Quarters # id_quarter &lt;- var_pop$values[[6]]$id # Select all quarters id_quarter &lt;- &quot;2020K4&quot; # Select only 2020-Q4 # Parallel process with {future} plan(multisession) pop_migr &lt;- id_quarter %&gt;% future_map(steps) pop_migr &lt;- bind_rows(pop_migr) plan(&quot;default&quot;) # Clean column names and format some data pop_migr %&gt;% rename(region = OMRÅDE, ancestry = HERKOMST, origin = IELAND, date = TID, pop = INDHOLD) %&gt;% mutate(region = gsub(&quot;Copenhagen&quot;, &quot;København&quot;, region)) %&gt;% mutate(date = gsub(&quot;Q&quot;, &quot;&quot;, date), date = as_date_yq(as.integer(date)), date = first_of_quarter(date)) -&gt; pop_migr # Total Immigrants and Descendants by region, date, and country of origin pop_migr %&gt;% pivot_wider(c(region, origin, date), names_from = ancestry, values_from = pop) %&gt;% mutate(Total = Immigrants + Descendant) %&gt;% pivot_longer(cols = c(Immigrants, Descendant, Total), values_to = &quot;pop&quot;, names_to = &quot;ancestry&quot;) -&gt; pop_migr # Spatial distribution ---- ## Local Administrative Units (LAU) ---- options(gisco_cache_dir = &quot;C:/GISCO_spatial_data&quot;) dk_lau &lt;- gisco_get_lau(year = &quot;2019&quot;, country = &quot;DNK&quot;) %&gt;% mutate(LAU_NAME = str_conv(LAU_NAME, &quot;UTF-8&quot;)) %&gt;% arrange(LAU_NAME) # Join Foreign population (pop_migr) and municipalities (dk_lau) # Select only data from 2020-Q4 dk_lau %&gt;% left_join(filter(pop_migr, date == as.Date(&quot;2020-10-01&quot;)), by = c(&quot;LAU_NAME&quot; = &quot;region&quot;)) %&gt;% st_as_sf() -&gt; pop_migr_lau_2020Q4 # Big cities/urban areas big_cities &lt;- c(&quot;København&quot;, &quot;Aarhus&quot;, &quot;Odense&quot;, &quot;Aalborg&quot;, &quot;Frederiksberg&quot;, &quot;Vejle&quot;) big_cities &lt;- dk_lau %&gt;% filter(LAU_NAME %in% big_cities) # Plot total foreign citizens by LAU ---- ## Total foreign population by LAU (and percentage over the total migrants) ## Binds represent the same percentage of population (~20%) cumsum__breaks &lt;- c(0, 20, 40, 60, 80, 100) pop_migr_lau_2020Q4_total &lt;- pop_migr_lau_2020Q4 %&gt;% filter(ancestry == &quot;Total&quot;) %&gt;% group_by(LAU_NAME) %&gt;% summarise(pop = sum(pop, na.rm = TRUE)) %&gt;% arrange(-pop) %&gt;% ungroup() %&gt;% # LAU groups with the same percentage of migrants (~ 20%) mutate(pop_pct = 100 * pop/sum(pop), pop_pct_cum = cumsum(pop_pct), pop_pct_cum_brk = cut(pop_pct_cum, breaks = cumsum__breaks)) %&gt;% select(LAU_NAME, pop, pop_pct, pop_pct_cum, pop_pct_cum_brk) pop_migr_lau_2020Q4_total %&gt;% ggplot() + geom_sf(aes(fill = pop_pct_cum_brk), color = &quot;grey&quot;, size = 0.05) + scale_fill_brewer(name = &quot;Cumulative [%]&quot;, palette = &quot;YlGnBu&quot;, direction = -1, drop = FALSE) + labs(x = &quot;&quot;, y = &quot;&quot;) + theme_void() + ylim(54.50, 58.0) + geom_sf_label_repel(data = big_cities, aes(label = LAU_NAME), force = 10, nudge_y = c( 1.5, 2, 1, -1, -1, -1.5), nudge_x = c( -1, 1, 1, 1, 0, -1.5), seed = 10) Figure 1.6: Spatial distribution of immigrants and their descendants (Date: 2020-Q4) Spatial distribution: Turkish and Iraqi citizens are clustered over the big cities (why?): Historical reason? Do these countries have a long history of immigration into Denmark, and before the big cities where the main receptors of immigrants? Furthermore, since these people have been for a long time in Denmark they have a similar migration pattern than Danes (i.e. they have moved to big cities)? Are they supporting newcomers from these countries? Do they have support groups (religion,) in this municipalities, so newcomers prefer to stay in these cities? Links with country of origin? Polish, Romanian, and Syrian citizens settled all over Denmark, without a clear pattern. German citizens: in the big cities but the population is also important in the border region with Germany. ## Top 6 citizen groups (and percentage over the same country of origin) cumsum__breaks &lt;- c(0, 20, 40.0, 60.0, 80.0, 100) top_migr_groups &lt;- c(&quot;Turkey&quot;, &quot;Poland&quot;, &quot;Syria&quot;, &quot;Germany&quot;, &quot;Romania&quot;, &quot;Iraq&quot;) pop_migr_lau_2020Q4 %&gt;% filter(ancestry == &quot;Total&quot;, origin %in% top_migr_groups) %&gt;% group_by(origin) %&gt;% arrange(-pop) %&gt;% mutate(pop_pct = 100 * pop / sum(pop, na.rm = TRUE), pop_pct_cum = cumsum(pop_pct), pop_pct_cum_brk = cut(pop_pct_cum, breaks = cumsum__breaks)) %&gt;% select(LAU_NAME, origin, pop, pop_pct, pop_pct_cum, pop_pct_cum_brk) -&gt; pop_migr_lau_2020Q4_top_groups # facet by top countries, adding the total number of immigrants/descendants sum_pop &lt;- function(country) { sum(pop_migr_lau_2020Q4_top_groups[pop_migr_lau_2020Q4_top_groups$origin == country, ]$pop, na.rm = T) } levels &lt;- top_migr_groups labels &lt;- c(paste(&quot;Turkish citizens\\n(&quot; , sum_pop(&quot;Turkey&quot;) , &quot; inhabitants)&quot;, sep = &quot;&quot;), paste(&quot;Polish citizens\\n(&quot; , sum_pop(&quot;Poland&quot;) , &quot; inhabitants)&quot;, sep = &quot;&quot;), paste(&quot;Syrian citizens\\n(&quot; , sum_pop(&quot;Syria&quot;) , &quot; inhabitants)&quot;, sep = &quot;&quot;), paste(&quot;German citizens\\n(&quot; , sum_pop(&quot;Germany&quot;), &quot; inhabitants)&quot;, sep = &quot;&quot;), paste(&quot;Romanian citizens\\n(&quot;, sum_pop(&quot;Romania&quot;), &quot; inhabitants)&quot;, sep = &quot;&quot;), paste(&quot;Iraqi citizens\\n(&quot; , sum_pop(&quot;Iraq&quot;), &quot; inhabitants)&quot;, sep = &quot;&quot;) ) pop_migr_lau_2020Q4_top_groups %&gt;% mutate(origin = factor(origin, levels = levels, labels = labels)) %&gt;% ggplot() + geom_sf(aes(fill = pop_pct_cum_brk), color = &quot;grey&quot;, size = 0.05) + scale_fill_brewer(name = &quot;Cumulative [%]&quot;, palette = &quot;YlGnBu&quot;, direction = -1) + facet_wrap(~ origin, ncol = 2) + theme_void() Figure 1.7: Top countries of origin for immigrants and their descendants (Date: 2020-Q4) Definitions (from DST): Immigrant: An immigrant is defined as a person born abroad whose parents are both (or one of them if there is no available information on the other parent) foreign citizens or were both born abroad. If there is no available information on either of the parents and the person was born abroad, the person is also defined as an immigrant. Descendant: A descendant is defined as a person born in Denmark whose parents (or one of them if there is no available information on the other parent) are either immigrants or descendants with foreign citizenship. If there is no available information on either of the parents and the person in question is a foreign citizen, the person is also defined as a descendant. Person of Danish origin: A person  regardless place of birth  where at least one parent is Danish citizen and also born in Denmark. Country of origin: Country of origin is defined as following: When no parents are known, the country of origin is defined from the persons own information. If the person is an immigrant, its assumed that the country of origin is equal to the country of birth. If the person is a descendant, its assumed that the country of origin is equal to the country of citizenship. When only one parent is known, the country of origin is defined as the country of birth of the parent. If this is Denmark, the country of citizenship is used. When both parents are known, the country of origin is defined as the country of birth of the mother respectively country of citizenship. # Load data ---- #&#39; Data from Statistic Denmark: https://www.statbank.dk/10021 #&#39; Table: FOLK1C #&#39; Population at the first day of the quarter by region, ancestry, and country of origin #&#39; Subjects of interest: population and elections (02) #&#39; Immigrants and their descendants (2402) id_table &lt;- &quot;FOLK1C&quot; var_pop &lt;- get_table_metadata(table_id = id_table, variables_only = TRUE) # loop by quarter for getting the data steps &lt;- function(quarter){ var_values &lt;- list(id_region, id_ancestry, id_citizen, quarter) var_input &lt;- purrr::map2(.x = var_codes, .y = var_values, .f = ~list(code = .x, values = .y)) get_data(id_table, variables = var_input) } # Codes for var_input var_codes &lt;- c(&quot;OMRÅDE&quot;, &quot;HERKOMST&quot;, &quot;IELAND&quot;, &quot;Tid&quot;) # Values for var_input ## Region: Denmark id_region &lt;- NA ## Ancestry (Immigrants and Descendant) id_ancestry &lt;- c(4, 3) ## Country of origin (remove total) id_citizen &lt;- as.numeric(var_pop$values[[5]]$id) id_citizen &lt;- id_citizen[id_citizen &gt; 0] ## Quarters id_quarter &lt;- var_pop$values[[6]]$id[1:45] # Select all quarters # Parallel process with {future} plan(multisession) pop_migr &lt;- id_quarter %&gt;% future_map(steps) pop_migr &lt;- bind_rows(pop_migr) plan(&quot;default&quot;) # Clean column names and format some data pop_migr &lt;- pop_migr %&gt;% rename(region = OMRÅDE, ancestry = HERKOMST, origin = IELAND, date = TID, pop = INDHOLD) %&gt;% mutate(region = gsub(&quot;Copenhagen&quot;, &quot;København&quot;, region)) %&gt;% mutate(date = gsub(&quot;Q&quot;, &quot;&quot;, date), date = as_date_yq(as.integer(date)), date = first_of_quarter(date)) # Total Immigrants and Descendants by region, date, and country of origin pop_migr &lt;- pop_migr %&gt;% pivot_wider(c(region, origin, date), names_from = ancestry, values_from = pop) %&gt;% mutate(Total = Immigrants + Descendant) %&gt;% pivot_longer(cols = c(Immigrants, Descendant, Total), values_to = &quot;pop&quot;, names_to = &quot;ancestry&quot;) # Plot changes over time for all Denmark ---- # Plot only the evolution of the top 10 countries in 2019Q1 pop_migr_top10 &lt;- pop_migr %&gt;% filter(region == &quot;All Denmark&quot;, date == as.Date(&quot;2019-01-01&quot;), ancestry == &quot;Total&quot;) %&gt;% slice_max(pop, n = 10) pop_migr_top10 &lt;- pop_migr %&gt;% filter(region == &quot;All Denmark&quot;, origin %in% pop_migr_top10$origin) %&gt;% # Reorder factors (shorted by Total population in 2019-q1) pivot_wider(c(origin, date), names_from = ancestry, values_from = pop) %&gt;% mutate(origin = factor(origin), origin = fct_reorder2(origin, date, Total)) # Total p1 &lt;- pop_migr_top10 %&gt;% ggplot() + geom_line(aes(x = date, y = Total/1000, colour = origin)) + theme_bw() + labs(title = &quot;Immigrants and descendants in Denmark&quot;, subtitle = &quot;Top 10 countries of origin in 2020&quot;, y = &quot;Pop [x1000]&quot;, x = &quot;&quot;) + scale_color_brewer(name = &quot;Country of\\norigin&quot;, palette = &quot;Paired&quot;) # Immigrants and Descendants p2 &lt;- pop_migr_top10 %&gt;% select(-Total) %&gt;% pivot_longer(cols = c(Immigrants, Descendant), names_to = &quot;ancestry&quot;, values_to = &quot;pop&quot;) %&gt;% mutate(ancestry = factor(ancestry, levels = c(&quot;Immigrants&quot;,&quot;Descendant&quot;))) %&gt;% ggplot() + geom_line(aes(x = date, y = pop/1000, colour = origin)) + facet_grid(~ancestry) + theme_bw() + labs(subtitle = &quot;Divided by ancestry&quot;, y = &quot;Pop [x1000]&quot;, x = &quot;&quot;) + scale_color_brewer(name = &quot;Country of\\norigin&quot;, palette = &quot;Paired&quot;) p1 / p2 + plot_layout(guides = &quot;collect&quot;) "]]
