[["OSM-features.html", "Chapter 5 Open Street Map 5.1 Features 5.2 Potential model", " Chapter 5 Open Street Map The location information has been obtained from Open Street Map. We have selected services inside a buffer of approx. 2 km around the study area (Figure 5.1 and 5.2), assuming that people may use then (e.g. parks, parking areas) outside Copenhagen City but they are close enough to people houses. Then, we estimate the accessibility to each services (i.e. feature) in the centroid of the grid cell of 100m x 100m; i.e. Potential model chapter 1. We selected two types of features; i. areal features and ii. point features; where the mass of the service (\\(M_j\\)) is the area of the polygon in \\(m^2\\) or equal for all services (i.e. 1), respectively. On the other hand, the distance (\\(d_{ij}\\) in \\(m^2\\)) is the distance between the centroid of the polygon (i.e. areas features) or the point (i.e. point feature) and the centroid of the grid cells. 5.1 Features 5.1.1 Areal features The selected features and their expected effect on housing prices are reported in Table 5.1. Hospital, and Schools (e.g. schools) may create traffic and noise. Therefore, they may have a negative effect on housing prices (Gultekin and Yamamura (2006)). # List of OSM data # Available features: https://wiki.openstreetmap.org/wiki/Map_features osm_poly_list &lt;- tribble( ~feature, ~key, ~value, ~exp_effect, # Transportation &quot;Parking&quot;, &quot;amenity&quot;, &quot;parking&quot;, &quot;positive&quot;, # Green areas &quot;Park&quot;, &quot;leisure&quot;, c(&quot;park&quot;, &quot;garden&quot;, &quot;playground&quot;), &quot;positive&quot;, &quot;Allotment&quot;, &quot;landuse&quot;, &quot;allotments&quot;, &quot;positive&quot;, &quot;Meadow&quot;, &quot;landuse&quot;, &quot;meadow&quot;, &quot;positive&quot;, # Recreation ground &quot;Recreation&quot;, &quot;landuse&quot;, &quot;recreation_ground&quot;, &quot;positive&quot;, # Education &quot;School&quot;, &quot;amenity&quot;, c(&quot;school&quot;, &quot;kindergarten&quot;), &quot;negative&quot;, &quot;University&quot;, &quot;amenity&quot;, c(&quot;university&quot;, &quot;college&quot;), &quot;positive&quot;, # Healthcare &quot;Hospital&quot;, &quot;amenity&quot;, c(&quot;hospital&quot;), &quot;negative&quot; ) osm_poly_list &lt;- osm_poly_list %&gt;% unnest(c(value)) %&gt;% as.data.table() osm_poly_list %&gt;% kbl(caption = &quot;Expeced effect of polygon features on housing prices&quot;) %&gt;% kable_paper() Table 5.1: Expeced effect of polygon features on housing prices feature key value exp_effect Parking amenity parking positive Park leisure park positive Park leisure garden positive Park leisure playground positive Allotment landuse allotments positive Meadow landuse meadow positive Recreation landuse recreation_ground positive School amenity school negative School amenity kindergarten negative University amenity university positive University amenity college positive Hospital amenity hospital negative # Bounding of the study area (approx. buffer of 2km) box &lt;- c(xmin = 714906, xmax = 733618, ymin = 6166579, ymax = 6184092) bbox &lt;- st_bbox(box) bbox_sf &lt;- st_as_sfc(bbox) %&gt;% st_set_crs(&quot;EPSG:25832&quot;) # Get polygons osm_poly_dnld &lt;- oe_get(place = &quot;Copenhagen&quot;, layer = &quot;multipolygons&quot;, extra_tags = c(&quot;building&quot;, &quot;railway&quot;), provider = &quot;bbbike&quot;) %&gt;% # Convert to data.table as.data.table() %&gt;% # Long format melt(id.vars = c(&quot;osm_id&quot;, &quot;osm_way_id&quot;, &quot;type&quot;, &quot;name&quot;, &quot;geometry&quot;), variable.name = &quot;key&quot;, value.name = &quot;value&quot;) # Reading layer `multipolygons&#39; from data source `C:\\OSM_data\\bbbike_Copenhagen.gpkg&#39; using driver `GPKG&#39; # Simple feature collection with 377023 features and 26 fields # Geometry type: MULTIPOLYGON # Dimension: XY # Bounding box: xmin: 12.3 ymin: 55.6 xmax: 12.7 ymax: 55.8 # Geodetic CRS: WGS 84 # Merge and convert to sf osm_poly &lt;- merge(osm_poly_list, osm_poly_dnld, by = c(&quot;key&quot;, &quot;value&quot;)) %&gt;% # Convert to sf object st_sf() %&gt;% # Transform CRS st_transform(&quot;EPSG:25832&quot;) %&gt;% # Remove non-valid polygons (i.e. 2 polygons) mutate(valid = st_is_valid(.)) %&gt;% filter(!is.na(valid)) %&gt;% # From Meadow get only &quot;Kalvebod Fælled&quot; filter(feature != &quot;Meadow&quot; | (key == &quot;landuse&quot; &amp; value == &quot;meadow&quot; &amp; name == &quot;Kalvebod Fælled&quot;)) %&gt;% mutate(feature = case_when(feature == &quot;Meadow&quot; ~ &quot;Kalvebod_Fælled&quot;, TRUE ~ feature)) %&gt;% # Mass of the service (area of the polygons) mutate(m_service = as.numeric(units::set_units(st_area(.), m^2))) %&gt;% # crop to Bounding of the study area %&gt;% st_crop(bbox_sf) %&gt;% # Nest by feature group_by(feature) %&gt;% nest() %&gt;% ungroup() %&gt;% rename(data_poly = data) %&gt;% # Get centroids mutate(data_points = map(data_poly, st_centroid)) Spatial distribution (Figure 5.1) osm_poly %&gt;% unnest(cols = c(data_poly)) %&gt;% st_sf() %&gt;% ggplot() + geom_sf(data = st_crop(dk_country, bbox_sf), fill = &quot;grey95&quot;) + geom_sf(data = cph_parish, fill = &quot;grey85&quot;, color = &quot;grey50&quot;, size = 0.05) + geom_sf(fill = &quot;#D55E00&quot;, col = NA) + labs(caption = &quot;Source: Open Street Map&quot;) + theme_void() + facet_wrap(~feature) Figure 5.1: Spatial distribution of OSM areal features 5.1.2 Point features Point features and their expected effect on housing prices (Table 5.2). # Sustenance (points) osm_points_list &lt;- tribble( ~feature, ~key, ~value, ~exp_effect, # Sustenance &quot;Sustenance&quot;, &quot;amenity&quot;, c(&quot;bar&quot;, &quot;biergarten&quot;, &quot;cafe&quot;, &quot;fast_food&quot;, &quot;food_court&quot;, &quot;ice_cream&quot;, &quot;pub&quot;, &quot;restaurant&quot;), &quot;negative&quot;, # Shops &quot;Shop&quot;, &quot;shop&quot;, c(&quot;supermarket&quot;, &quot;mall&quot;, &quot;general&quot;, &quot;dairy&quot;, &quot;department_store&quot;, &quot;butcher&quot;, &quot;seafood&quot;, &quot;bakery&quot;, &quot;convenience&quot;), &quot;positive&quot;, # Entertainment, Arts &amp; Culture.... &quot;Entmt_pos&quot;, &quot;amenity&quot;, c(&quot;cinema&quot;, &quot;social_centre&quot;, &quot;theatre&quot;, &quot;community_centre&quot;, &quot;arts_centre&quot;, &quot;public_bookcase&quot;), &quot;positive&quot;, &quot;Entmt_neg&quot;, &quot;amenity&quot;, c(&quot;brothel&quot;, &quot;casino&quot;, &quot;gambling&quot;, &quot;love_hotel&quot;, &quot;nightclub&quot;, &quot;stripclub&quot;, &quot;swingerclub&quot;), &quot;negative&quot;, # Healthcare &quot;Social_fac&quot;, &quot;amenity&quot;, &quot;social_facility&quot;, &quot;negative&quot;, # Public transport &quot;Underground&quot;, &quot;railway&quot;, &quot;subway_entrance&quot;, &quot;positive&quot;, &quot;Bus_stop&quot;, &quot;highway&quot;, &quot;bus_stop&quot;, &quot;positive&quot;, &quot;Train_stop&quot;, &quot;railway&quot;, &quot;stop&quot;, &quot;positive&quot;) %&gt;% unnest(cols = c(value)) %&gt;% as.data.table() osm_points_list %&gt;% kbl(caption = &quot;Expeced effect of points features on housing prices&quot;) %&gt;% kable_paper() Table 5.2: Expeced effect of points features on housing prices feature key value exp_effect Sustenance amenity bar negative Sustenance amenity biergarten negative Sustenance amenity cafe negative Sustenance amenity fast_food negative Sustenance amenity food_court negative Sustenance amenity ice_cream negative Sustenance amenity pub negative Sustenance amenity restaurant negative Shop shop supermarket positive Shop shop mall positive Shop shop general positive Shop shop dairy positive Shop shop department_store positive Shop shop butcher positive Shop shop seafood positive Shop shop bakery positive Shop shop convenience positive Entmt_pos amenity cinema positive Entmt_pos amenity social_centre positive Entmt_pos amenity theatre positive Entmt_pos amenity community_centre positive Entmt_pos amenity arts_centre positive Entmt_pos amenity public_bookcase positive Entmt_neg amenity brothel negative Entmt_neg amenity casino negative Entmt_neg amenity gambling negative Entmt_neg amenity love_hotel negative Entmt_neg amenity nightclub negative Entmt_neg amenity stripclub negative Entmt_neg amenity swingerclub negative Social_fac amenity social_facility negative Underground railway subway_entrance positive Bus_stop highway bus_stop positive Train_stop railway stop positive osm_points_dnld &lt;- oe_get(place = &quot;Copenhagen&quot;, layer = &quot;points&quot;, extra_tags = c(&quot;amenity&quot;, &quot;shop&quot;, &quot;railway&quot;, &quot;highway&quot;), provider = &quot;bbbike&quot;) %&gt;% # Convert to data.table as.data.table() %&gt;% # Long format melt(id.vars = c(&quot;osm_id&quot;, &quot;name&quot;, &quot;address&quot;, &quot;geometry&quot;), variable.name = &quot;key&quot;, value.name = &quot;value&quot;) # Reading layer `points&#39; from data source `C:\\OSM_data\\bbbike_Copenhagen.gpkg&#39; using driver `GPKG&#39; # Simple feature collection with 399818 features and 13 fields # Geometry type: POINT # Dimension: XY # Bounding box: xmin: 12.3 ymin: 55.6 xmax: 12.7 ymax: 55.8 # Geodetic CRS: WGS 84 osm_points &lt;- merge(osm_points_list, osm_points_dnld, by = c(&quot;key&quot;, &quot;value&quot;)) %&gt;% # Convert to sf object st_sf() %&gt;% # Transform CRS st_transform(&quot;EPSG:25832&quot;) %&gt;% # crop to Bounding of the study area %&gt;% st_crop(bbox_sf) %&gt;% # Mass of the service (The same for all points = 1) mutate(m_service = 1) %&gt;% # Nest by feature group_by(feature) %&gt;% nest() %&gt;% rename(data_points = data) Spatial distribution (Figure 5.2) osm_points %&gt;% unnest(cols = c(data_points)) %&gt;% st_sf() %&gt;% ggplot() + geom_sf(data = st_crop(dk_country, bbox_sf), fill = &quot;grey95&quot;) + geom_sf(data = cph_parish, fill = &quot;grey85&quot;, color = &quot;grey50&quot;, size = 0.05) + geom_sf(colour = &quot;#D55E00&quot;, size = 0.5) + labs(caption = &quot;Source: Open Street Map&quot;) + theme_void() + facet_wrap(~feature) Figure 5.2: Spatial distribution of OSM point features 5.2 Potential model We have used exponential functions with impedance factors of 2 and spans of 5000m, 500m, or 300m depending on the service we modelled (Table 5.3). # Based on: https://riatelab.github.io/potential/articles/potential.html # Set Spatial Interaction Function (fun, span, beta) sif &lt;- tribble( ~feature, ~fun, ~span, ~beta, &quot;Kalvebod_Fælled&quot;, &quot;e&quot;, 5000, 2, &quot;Recreation&quot;, &quot;e&quot;, 500, 2, &quot;Train_stop&quot;, &quot;e&quot;, 500, 2, &quot;Underground&quot;, &quot;e&quot;, 500, 2, &quot;Parking&quot;, &quot;e&quot;, 300, 2, &quot;Park&quot;, &quot;e&quot;, 300, 2, &quot;School&quot;, &quot;e&quot;, 300, 2, &quot;University&quot;, &quot;e&quot;, 300, 2, &quot;Hospital&quot;, &quot;e&quot;, 300, 2, &quot;Allotment&quot;, &quot;e&quot;, 300, 2, &quot;Sustenance&quot;, &quot;e&quot;, 300, 2, &quot;Entmt_pos&quot;, &quot;e&quot;, 300, 2, &quot;Entmt_neg&quot;, &quot;e&quot;, 300, 2, &quot;Social_fac&quot;, &quot;e&quot;, 300, 2, &quot;Shop&quot;, &quot;e&quot;, 300, 2, &quot;Bus_stop&quot;, &quot;e&quot;, 300, 2 ) sif %&gt;% kbl(caption = &quot;Spatial interaction parameters&quot;) %&gt;% kable_paper() Table 5.3: Spatial interaction parameters feature fun span beta Kalvebod_Fælled e 5000 2 Recreation e 500 2 Train_stop e 500 2 Underground e 500 2 Parking e 300 2 Park e 300 2 School e 300 2 University e 300 2 Hospital e 300 2 Allotment e 300 2 Sustenance e 300 2 Entmt_pos e 300 2 Entmt_neg e 300 2 Social_fac e 300 2 Shop e 300 2 Bus_stop e 300 2 The spatial interaction functions are therefero as follow (Figure 5.3). par(mfrow=c(2,2)) plot_inter(fun = &quot;e&quot;, span = 300, beta = 2) plot_inter(fun = &quot;e&quot;, span = 500, beta = 2) plot_inter(fun = &quot;e&quot;, span = 5000, beta = 2) Figure 5.3: Spatial interaction functions # Merge all OMS features (as points) OMS &lt;- osm_poly %&gt;% select(feature, data_points) %&gt;% bind_rows(osm_points) %&gt;% # Add SIF parameters left_join(sif, by = &quot;feature&quot;) # Aux. function for calculating the potential f_pot &lt;- function(df, fun, span, beta) { mcpotential(x = df, y = grids100m$data_points[[1]], var = &quot;m_service&quot;, fun = fun, span = span, beta = beta, limit = 5 * span) } # Estimate potential (in percentage - relatively to the maximum) pot_est &lt;- list() for(i in seq_along(OMS$data_points)) { # Values potential &lt;- f_pot(OMS$data_points[[i]], OMS$fun[i], OMS$span[i], OMS$beta[i]) # Percentage relatively to the maximum pot_est[[i]] &lt;- 100 * potential / max(potential) # Add names names(pot_est)[[i]] &lt;- OMS$feature[i] } # Add values to the grid cells of 100 x 100 m (grids100m) pot &lt;- rbind(pot_est) %&gt;% as_tibble() %&gt;% unnest(everything()) grids100m &lt;- grids100m %&gt;% bind_cols(pot %&gt;% nest(pot = everything())) Potential model (Figure 5.4) # Plots grids100m %&gt;% select(data_poly, pot) %&gt;% unnest(c(data_poly, pot)) %&gt;% pivot_longer(-c(grid_ID, geometry), names_to = &quot;feature&quot;, values_to = &quot;value&quot;) %&gt;% st_sf() %&gt;% ggplot() + geom_sf(aes(fill = value), col = NA) + scale_fill_viridis_c(name = &quot;[%]&quot;, option = &quot;magma&quot;, direction = -1) + geom_sf(data = cph_parish, fill = NA, color = &quot;grey50&quot;, size = 0.05) + theme_void() + facet_wrap(~feature) Figure 5.4: Potential model "]]
